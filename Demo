{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Demo","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyM/JLCb3I9npt473fw/HHKv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"GunmEQTC3-jg"},"source":["# Import Statements"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uJEZJtGr-7P7","executionInfo":{"status":"ok","timestamp":1617111281434,"user_tz":-480,"elapsed":2199,"user":{"displayName":"smu421 gpu5","photoUrl":"","userId":"04153518163971817613"}},"outputId":"8ef8b345-740f-42a9-af84-b0d737b28d63"},"source":["from google.colab import drive\n","drive.mount('/content/drive', force_remount=True)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"u17rWeng334l","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1617111180691,"user_tz":-480,"elapsed":11852,"user":{"displayName":"smu421 gpu5","photoUrl":"","userId":"04153518163971817613"}},"outputId":"3198d848-cef9-4d48-b472-4ecbc6a320d9"},"source":["import pickle\n","import tensorflow as tf\n","import pandas as pd\n","import numpy as np\n","import librosa\n","from tensorflow.keras.models import load_model\n","import scipy\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.externals.joblib import load\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","path = \"/content/drive/MyDrive/Colab Notebooks/Saved Models/cnn_gender_model_5.h5\"\n","gender_model = tf.keras.models.load_model(path)\n","\n","path = \"/content/drive/MyDrive/Colab Notebooks/Saved Models/cnn_age_model_6.h5\"\n","age_model = tf.keras.models.load_model(path)\n","\n","gender_ss = load('/content/drive/MyDrive/Colab Notebooks/Saved Models/std_scaler_gender_5.bin')\n","age_ss = load('/content/drive/MyDrive/Colab Notebooks/Saved Models/std_scaler_age_6.bin')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/joblib/__init__.py:15: FutureWarning: sklearn.externals.joblib is deprecated in 0.21 and will be removed in 0.23. Please import this functionality directly from joblib, which can be installed with: pip install joblib. If this warning is raised when loading pickled models, you may need to re-serialize those models with scikit-learn 0.21+.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"CDM1KaQX6GUe"},"source":["def load_mp3(filename):\n","    audio_path = '/content/drive/MyDrive/Colab Notebooks/recordings/' + filename\n","    y , sr = librosa.load(audio_path)\n","    return y , sr\n","\n","    \n","def describe_freq(freqs):\n","    q1 = np.quantile(freqs, 0.25)\n","    iqr = scipy.stats.iqr(freqs)\n","    \n","    return [abs(q1), abs(iqr)]"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3zijbu2V3p1u"},"source":["# Upload Voice MP3"]},{"cell_type":"code","metadata":{"id":"VjjCO6x532Tr"},"source":["  def predict_gender_age(filename):\n","    print(\"Processing file\")\n","    mp3 = load_mp3(filename)\n","\n","    freq = np.fft.fft(mp3[0])\n","    stats = describe_freq(freq)\n","\n","    q1 = stats[0]\n","    iqr = stats[1]\n","\n","    spectral_centroid=librosa.feature.spectral_centroid(mp3[0])[0]\n","    mean_spectral_centroid = spectral_centroid.mean()\n","\n","    rmse = librosa.feature.rms(mp3[0])[0]\n","    mean_rmse = rmse.mean()\n","\n","    mfcc = librosa.feature.mfcc(mp3[0])\n","\n","    ff = librosa.pyin(mp3[0], librosa.note_to_hz('C2'), librosa.note_to_hz('C7'))[0]\n","    meanff = np.nanmean(ff)\n","\n","    stft = np.abs(librosa.stft(mp3[0]))\n","    chroma = np.mean(librosa.feature.chroma_stft(S=stft, sr=mp3[1]).T, axis=0)\n","    mel = np.mean(librosa.feature.melspectrogram(mp3[0], sr=mp3[1]).T,axis=0)\n","\n","    sample = pd.DataFrame(data=[[mean_rmse, mean_spectral_centroid, mfcc, meanff, q1, iqr, chroma, mel]],\n","                          columns=['mean_RMSE', 'mean_spec_centroid', 'mfcc', \"meanff\", \"q1\", \"iqr\", \"chroma\", \"mel\"])\n","    print(\"Done\")\n","    print()\n","    def get_np_means(arr):\n","      return np.mean(arr.T, axis=0)\n","\n","      \n","    sample[\"mfcc\"] = sample[\"mfcc\"].apply(get_np_means)\n","    sample = sample.dropna()\n","\n","    single_data_columns = [\"mean_RMSE\",\"mean_spec_centroid\",\"meanff\",\"q1\",\"iqr\"]\n","\n","    combined = sample[single_data_columns].values\n","\n","    xs_raw = []\n","\n","    for i in range(sample.shape[0]):\n","      mfcc = sample[\"mfcc\"].iloc[i]\n","      chroma = sample[\"chroma\"].iloc[i]\n","      mel = sample[\"mel\"].iloc[i]\n","      combined_stats = combined[i]\n","\n","      xs_raw.append(np.concatenate((\n","          combined_stats,\n","          mfcc,\n","          chroma,\n","          mel), axis=0))\n","      \n","    xs_raw = np.array(xs_raw)\n","    x_test_ss = gender_ss.transform(xs_raw)\n","    gender_prediction = gender_model.predict_classes(x_test_ss)[0]\n","    if gender_prediction == 0:\n","      print(\"Predicted gender: Male\")\n","    else:\n","      print(\"Predicted gender: Female\")\n","    print()\n","    print(\"Confidence:\")\n","    confidence = gender_model.predict(x_test_ss)[0]\n","    c_arr = []\n","    for value in confidence:\n","      c_arr.append(str(value/sum(confidence)*100)+\"%\")\n","    print(c_arr)\n","    print()\n","    sample.insert(0,'gender',gender_prediction)\n","    single_data_columns = [\"gender\",\"mean_RMSE\",\"mean_spec_centroid\",\"meanff\",\"q1\",\"iqr\"]\n","\n","    combined = sample[single_data_columns].values\n","\n","    xs_raw = []\n","\n","    for i in range(sample.shape[0]):\n","      mfcc = sample[\"mfcc\"].iloc[i]\n","      chroma = sample[\"chroma\"].iloc[i]\n","      mel = sample[\"mel\"].iloc[i]\n","      combined_stats = combined[i]\n","\n","      xs_raw.append(np.concatenate((\n","          combined_stats,\n","          mfcc,\n","          chroma,\n","          mel), axis=0))\n","      \n","    xs_raw = np.array(xs_raw)\n","    x_test_ss = age_ss.transform(xs_raw)\n","    age_prediction = age_model.predict_classes(x_test_ss)\n","    age_dict = {\n","        \"teens\": 0,\n","        \"twenties\": 1,\n","        \"thirties\": 2,\n","        \"fourties\": 3,\n","        \"fifties\": 4,\n","        \"sixties\": 5,\n","        \"seventies\": 6,\n","        \"eighties\": 7\n","    }\n","    reverse_age_dict = {v: k for k, v in age_dict.items()}\n","    print(\"Predicted age: \" + reverse_age_dict[age_prediction[0]])\n","    print()\n","    print(\"Confidence:\")\n","    confidence = age_model.predict(x_test_ss)[0]\n","    c_arr = []\n","    for value in confidence:\n","      c_arr.append(str(value/sum(confidence)*100)+\"%\")\n","    print(c_arr)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"890RMbnr3xsI","executionInfo":{"status":"ok","timestamp":1617111293012,"user_tz":-480,"elapsed":5836,"user":{"displayName":"smu421 gpu5","photoUrl":"","userId":"04153518163971817613"}},"outputId":"772ace8b-87e5-471d-9a8b-1769743153bd"},"source":["# Load sample voice for prediction\n","filename = \"yolo_voice.mp3\"\n","predict_gender_age(filename)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Processing file\n","Done\n","\n","Predicted gender: Male\n","\n","Confidence:\n","['99.99947463542863%', '0.0005253645713652723%']\n","\n","Predicted age: twenties\n","\n","Confidence:\n","['30.143567034980883%', '64.58740044803145%', '3.834150619026597%', '1.3040210668956498%', '0.12297836004221824%', '0.00788247102320101%']\n"],"name":"stdout"}]}]}